#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

readonly PVC_SELECTOR="${1:-app=collection-sumologic-fluentd-logs}"
readonly HPA_NAME="${2:-collection-sumologic-fluentd-logs}"
readonly NAMESPACE="${3:-sumologic}"

function get_sorted_pvcs() {
  kubectl -n "${NAMESPACE}"  get pvc --selector="${PVC_SELECTOR}" --no-headers \
    | awk '{print $1}' \
    | sort
}

function max_number() {
  local num1
  local num2

  num1="$1"
  num2="$2"

  if [[ ${num1} -gt ${num2} ]]; then
    echo "${num1}"
  else
    echo "${num2}"
  fi
}

function check_if_pvc_mounted() {
  local pvc_name="$1"

  kubectl -n "${NAMESPACE}" describe pvc "${pvc_name}" \
    | grep "^Mounted By:" \
    | grep -q "<none>"

  return $?
}

function get_pvc_number() {
  local pvc_name="$1"

  echo "${pvc_name##*-}"
}

readonly PVC_LIST="$(get_sorted_pvcs)"
readonly PVC_AMOUNT="$(echo "${PVC_LIST}" | wc -l)"

readonly CURRENT_REPLICAS="$(kubectl -n "${NAMESPACE}" get hpa "${HPA_NAME}" -o jsonpath='{.status.currentReplicas}')"
readonly DESIRED_REPLICAS="$(kubectl -n "${NAMESPACE}" get hpa "${HPA_NAME}" -o jsonpath='{.status.desiredReplicas}')"
readonly KEEP_REPLICAS="$(max_number "${DESIRED_REPLICAS}" "${CURRENT_REPLICAS}")"

if [[ ${PVC_AMOUNT} -gt ${KEEP_REPLICAS} ]]; then
  echo "There are excessive PVCs for ${PVC_SELECTOR} selector, starting cleanup..."

  for pvc in ${PVC_LIST}; do
    [[ $(get_pvc_number "${pvc}") -lt ${KEEP_REPLICAS} ]] && continue

    if check_if_pvc_mounted "${pvc}"; then
      echo "Deleting pvc ${NAMESPACE}/${pvc}"
    else
      echo "Excessive pvc ${NAMESPACE}/${pvc} is mounted - keeping."
    fi
  done
else
  echo "There are no excessive PVCs, exiting"
fi
